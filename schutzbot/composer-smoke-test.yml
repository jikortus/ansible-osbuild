---

- name: Run post-deployment smoke tests
  hosts: localhost
  become: yes
  tasks:

    - name: Install packages to boot the image
      dnf:
        name:
          - htop
          - libvirt
          - libvirt-client
          - libvirt-daemon
          - libvirt-daemon-config-network
          - libvirt-daemon-config-nwfilter
          - libvirt-daemon-driver-interface
          - libvirt-daemon-driver-network
          - libvirt-daemon-driver-nodedev
          - libvirt-daemon-driver-nwfilter
          - libvirt-daemon-driver-qemu
          - libvirt-daemon-driver-secret
          - libvirt-daemon-driver-storage
          - libvirt-daemon-driver-storage-disk
          - libvirt-daemon-kvm
          - qemu-img
          - qemu-kvm
          - virt-install
        state: present
      async: 600
      poll: 0
      register: dnf_install

    - name: Deploy custom repositories that use internal mirrors
      copy:
        src: "repositories/{{ item }}"
        dest: /usr/share/osbuild-composer/repositories/
      loop:
        - fedora-31.json
        - fedora-32.json

    - name: Stop osbuild-composer if it is running
      systemd:
        name: osbuild-composer.service
        state: stopped

    - name: Verify that sources are set up
      command: composer-cli sources list

    - name: Write a simple blueprint with only bash inside
      copy:
        dest: /tmp/blueprint.toml
        content: |
          name = "bash"
          description = "A base system with bash"
          version = "0.0.1"

          [[packages]]
          name = "bash"

          [customizations.services]
          enabled = ["sshd", "cloud-init", "cloud-init-local", "cloud-config", "cloud-final"]

    - name: Push the blueprint into osbuild-composer
      command: composer-cli blueprints push /tmp/blueprint.toml

    - name: Get a list of the blueprints loaded
      command: composer-cli blueprints list
      register: blueprint_list

    - name: Fail if the blueprint is missing
      fail:
        msg: Our blueprint is not loaded.
      when: "'bash' not in blueprint_list.stdout"

    - name: Depsolve the blueprint
      command: composer-cli blueprints depsolve bash

    - name: Build the image
      command: composer-cli --json compose start bash qcow2
      register: compose_start

    - name: Set a fact for the compose UUID
      set_fact:
        compose_uuid: "{{ output_json.build_id }}"
      vars:
        output_json: "{{ compose_start.stdout | from_json }}"

    - name: Wait for the image to finish building
      command: "composer-cli --json compose info {{ compose_uuid }}"
      register: info_out
      until: (info_out.stdout | from_json).queue_status not in ['RUNNING', 'WAITING']
      retries: 40
      delay: 15

    - name: Check the final status of the compose
      command: "composer-cli --json compose info {{ compose_uuid }}"
      register: info_out

    - name: Fail if image build failed
      fail:
        var: info_out.stdout | from_json
      when: (info_out.stdout | from_json).queue_status != "FINISHED"

    - name: Download the image we built
      command: "composer-cli compose image {{ compose_uuid }}"

    - name: Ensure virtualization packages have finished installing.
      async_status:
        jid: "{{ dnf_install.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 120
      delay: 5

    - name: Start libvirtd
      systemd:
        name: libvirtd
        state: started
        enabled: yes

    - name: Create ssh key
      openssh_keypair:
        path: /tmp/sshkey
        comment: composer-test
      become: no

    - name: Write cloud-init user-data
      copy:
        dest: /tmp/config.yaml
        content: |
          #cloud-config
          package_upgrade: false
          users:
            - name: redhat
              groups: wheel
              lock_passwd: false
              passwd: $6$z2SpEKtNrsPuKVGj$wEXMnaFRjShqSQAvkRa42G5TTjnnoGd18fgMrIP9OHjGHvP7mfA4stSTSZTifaNnDw.WA8MxFkZgKWK282bDQ.
              shell: /bin/bash
              sudo: ['ALL=(ALL) NOPASSWD:ALL']
              ssh_authorized_keys:
                - {{ lookup('file', '/tmp/sshkey.pub') }}

    - name: Download cloud-localds script
      get_url:
        url: https://git.launchpad.net/cloud-utils/plain/bin/cloud-localds
        dest: /usr/local/bin/cloud-localds
        owner: root
        group: root
        mode: '0755'

    - name: Create cloud-init ISO
      command: /usr/local/bin/cloud-localds config.iso config.yaml
      args:
        chdir: /tmp

    - name: Run virt-install to import qcow
      command: |
        virt-install \
          --name composer-test \
          --memory 1024 \
          --vcpus 2 \
          --disk path={{ compose_uuid }}-disk.qcow2 \
          --disk path=/tmp/config.iso,device=cdrom \
          --import \
          --os-variant linux \
          --noautoconsole \
          --network network=default
      become: yes

    - name: Get address of the new VM (takes time while it boots)
      command: virsh domifaddr composer-test
      become: yes
      register: vm_address_check
      until: vm_address_check.stdout | regex_search("[0-9\.]*/24")
      retries: 60
      delay: 5

    - name: Get the IP address for the VM we just started
      set_fact:
        vm_ip: "{{ vm_address_check.stdout | regex_findall(\"([0-9\\.]*)/24\") | first }}"

    - name: "Wait for the ssh daemon to start on {{ vm_ip }}"
      wait_for:
        host: "{{ vm_ip }}"
        port: 22
        timeout: 300

    - name: "Add a dynamic host for the VM on {{ vm_ip }}"
      add_host:
        name: test_vm
        group: booted_instances
        ansible_host: "{{ vm_ip }}"
        ansible_user: redhat
        ansible_ssh_pipelining: yes

- hosts: booted_instances
  become: yes
  vars:
    ansible_private_key_file: /tmp/sshkey
  tasks:

    - name: Verify we are in the guest
      debug:
        var: ansible_default_ipv4